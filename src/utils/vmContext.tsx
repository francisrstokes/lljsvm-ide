import React, { useState } from "react";

import { createVM } from "../lljsvm/index";

let vm: any;

export const VMContext = React.createContext({} as any);
// Create some initial VM instance to avoid undefined values before initial compilation
vm = createVM([
  23,
  51,
  51,
  23,
  34,
  34,
  23,
  17,
  17,
  16,
  18,
  52,
  2,
  16,
  86,
  120,
  5,
  23,
  0,
  0,
  94,
  0,
  128,
  23,
  68,
  68,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  23,
  1,
  2,
  23,
  3,
  4,
  23,
  5,
  6,
  16,
  7,
  8,
  2,
  16,
  16,
  0,
  9,
  18,
  9,
  0,
  48,
  96,
]);

const VMContextProvider = ({ children }: any) => {
  const stateObj = {
    memory: vm.memory,
    cpu: vm.cpu,
    ip: vm.cpu.getRegister("ip"),
    fp: vm.cpu.getRegister("fp"),
    sp: vm.cpu.getRegister("sp"),
    stepCPU: () => stepCPU(),
  };

  const [vmState, setVmState] = useState(stateObj);
  const [isRunning, setIsRunning] = useState(false);
  const initVM = (program: number[]) => {
    vm = createVM(program);
    setVmState({
      ...stateObj,
      memory: vm.memory,
      cpu: vm.cpu,
      ip: vm.cpu.getRegister("ip"),
      fp: vm.cpu.getRegister("fp"),
      sp: vm.cpu.getRegister("sp"),
    });
  };
  const stepCPU = () => {
    vm.cpu.step();

    setVmState({
      ...stateObj,
      ip: vm.cpu.getRegister("ip"),
      fp: vm.cpu.getRegister("fp"),
      sp: vm.cpu.getRegister("sp"),
    });
  };
  return (
    <VMContext.Provider value={{ ...vmState, setIsRunning, isRunning, initVM }}>
      {children}
    </VMContext.Provider>
  );
};

export default VMContextProvider;
